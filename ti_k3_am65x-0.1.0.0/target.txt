target.txt - ti k3 am65x specific documentation

Copyright (c) 2019 Wind River Systems, Inc.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

1) Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

2) Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation and/or
other materials provided with the distribution.

3) Neither the name of Wind River Systems nor the names of its contributors may
be used to endorse or promote products derived from this software without specific
prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

modification history
 --------------------
04apr19,whe  created (VXWPG-114)

ti_k3_am65x - TI K3 AM65x Family

EXTERNAL DEPENDENCIES
None

INTRODUCTION

This document describes the features of the ti_k3_am65x unsupported BSP, which 
is designed to run on the TI K3 AM65x board. This is an ARM Cortex-A53 
processor-based platform.

Verified Boards

The current release of this BSP has been verified on the following boards:

TI K3 AM65x TMDX654GPEVM
TI K3 AM65x TMDX654IDKEVM

Jumpers & Switches

No jumper or switch needs to be set.

Running VxWorks

This section describes how to run VxWorks on the supported boards.

1. Creating Your VxWorks Image

    1.1 Create and Configure a VSB Project

    You must create a VxWorks source build (VSB) project before you create your
    VxWorks image project (VIP).

        1.1.1 Create the VSB project using Workbench

        In the "Project Setup" step in Workbench, select the current version of
        the ti_k3_am65x BSP (for example, ti_k3_am65x_0_1_0_0 UNSUPPORTED) or a
        cpu.

        Or just use one of the following command in the VxWorks 7 Development
        Shell:

        vxprj vsb create -bsp ti_k3_am65x -S myVsb

        1.1.2 Configure the VSB

        For a CPU-based VSB, the following layers and configurations must be
        enabled in the Workbench source build configuration editor:

        TI_K3

        Or use below command in the VxWorks 7 Development Shell:

        vxprj vsb add TI_K3

        1.1.3 Build the VSB

        Build your VSB in Workbench or use below command in the VxWorks 7 
        Development Shell:

        vxprj build

    1.2 Create and Configure a VIP

        Please note: Both WorkBench and the VxWorks 7 Development Shell can
        be used for VIP creating and configuring. All below sections will only
        use the VxWorks 7 Development Shell command as an example, and the
        corresponding operation in WorkBench is quite straight forward.

        1.2.1 Create Your VIP Based on Your VSB

        In the same directory as your VSB, use the following command to create
        a VIP.

        vxprj vip create -vsb myVsb ti_k3_am65x llvm myVip

        1.2.2 Configure and build the VIP

            1.2.2.1 Configure the Device Tree Blob (DTB) Loading Method

            The VxWorks 7 ARM BSP uses device tree nodes to describe
            device-specific information, and there are two methods to load the
            DTB:

                - Embedded:     the DTB is embedded in the VxWorks image.
                - Independent:  an independent file is created for the DTB. This
                                loading method is used by default.

            When the kernel is running in the embedded DTB mode, the kernel
            boot line information is retrieved directly from the device tree
            source (DTS) file 'chosen' node.

            To use the embedded method, use the following command in the VIP
            directory:

            vxprj vip component add myVip INCLUDE_STANDALONE_DTB

            1.2.2.2 Configure the Boot Method and Image Type

            This BSP supports booting VxWorks images from U-Boot.

            The U-Boot boot loader can boot up two kinds of VxWorks images:
            uVxWorks and the raw binary file, vxWorks.bin. The uVxWorks image is
            used for the U-Boot 'bootm' command, and needs an independent or
            embedded DTB file. The vxWorks.bin image is used for the U-Boot 'go'
            command and requires an embedded DTB.

            The VxWorks 7 boot application (bootApp) can only boot up a
            traditional VxWorks image and requires an embedded DTB.

            1.2.2.3 Build Your VIP

            Build your VIP in Workbench or use the following commands to create
            different VxWorks images:
            
            vxprj build uVxWorks
            vxprj build vxWorks.bin
            vxprj build vxWorks

2. Boot Your VxWorks Image Using U-Boot

    2.1 Set up the Target
        2.1.1 Attach the serial cable between the target board J42 serial 
              connector and the workstation, and attach a physical network 
              cable to the target.  
        2.1.2 Start a serial terminal emulator program on your workstation.
        2.1.3 Set the serial communication configuration as follows:

              Baud Rate: 115200
              Data: 8 bit
              Parity: None
              Stop: 1 bit
              Flow Control: None

    2.2 Set up the SD card and boot the Target Board
        2.2.1 Download the U-Boot image file am65xx-evm-linux-05.02.00.10.img.zip 
              at http://software-dl.ti.com/processor-sdk-linux/esd/AM65X/latest/index_FDS.html.
        2.2.2 Create SD Card, see http://software-dl.ti.com/processor-sdk-linux/esd/docs/05_02_00_10/linux/Overview_Getting_Started_Guide.html#windows-sd-card-creation-guide
        2.2.3 Eject the SD card from the workstation and insert into the target board.
        2.2.4 Power on the target board and observe the U-Boot shell on the 
              target serial console.

    2.3 Prepare the Host and Target Board

        2.3.1 Start a TFTP Server

        Open a TFTP server on your host and set the root directory to the
        project directory for the VIP that contains the VxWorks image.

        2.3.2 Configure the U-Boot Environment

        When the target board boots up, U-Boot prompts you to enter the U-Boot
        shell. To enter the shell, press any key before the countdown finishes.
        Type the following commands to set up the U-Boot environment:

        => setenv ipaddr 192.168.0.3
        => setenv netmask 255.255.255.0
        => setenv serverip 192.168.0.2
        => setenv gatewayip 192.168.0.1
        => saveenv

        Note:
            This is just an example, you must change the network parameters
            according to your actual situation.

    2.4 Downloading the VxWorks image

        2.4.1 Download the uVxWorks Image

        The uVxWorks image can be used along with an independent DTB file. The
        downloading address must not destroy the spaces used by VxWorks.
        Below is an example for this BSP:

        => tftpboot 0x83000000 uVxWorks

        Type the following command to download the DTB:

        => tftpboot 0x81000000 am65x.dtb

        2.4.2 Run the uVxWorks Image

        If the uVxWorks image uses the independent DTB file, use the
        'bootm <image address> - <DTB address>' command to load and run the
        uVxWorks image as follows:

        => bootm 0x83000000 - 0x81000000

        If the uVxWorks image uses the embedded DTB file, use the
        'bootm <image address>' command to load and run the uVxWorks image as
        follows:

        => bootm 0x83000000

3. Summary

   The following table summarizes the configuration for VxWorks 7:

                    | uVxWorks      | vxWorks.bin           | vxWorks
    --------------------------------------------------------------------------------
    Boot Loader     | U-Boot/VxBl   | U-Boot                | boot application/VxBL
    DTB Mode        | independent   | embedded              | embedded
    Component Needed|               | INCLUDE_STANDALONE_DTB| INCLUDE_STANDALONE_DTB
    Boot Method     | bootm         | go                    |

DEVICE TREE

This BSP uses device tree nodes to describe the device-specific information
on the board. The supported drivers get configuration data from the device tree
source files (with suffix .dts) under the BSP directory. For the structure of
the device tree source file, please refer to the ePAPR specification here:
http://www.power.org/technology-introduction/standards-specifications/

The supported boards and the corresponding device tree source (DTS) files for
this BSP are mapped as follows:

Board                   | Device Tree Source
-----------------------------------------------
TI K3 AM65x             | am65x.dtb

Based on the following device tree blob (DTB) loading methods, these DTS files
are used in different ways:

- Embedded:     A VIP parameter, DTS_FILE, designates which DTS file is used for
                the current VIP. The default value is set to support the correct
                board according to the table above.

- Independent:  The corresponding DTB files (with suffix .dtb) are created in
                the 'default' subdirectory of the VIP as part of the build
                process. These DTB files are used by the U-Boot 'bootm' command.

FEATURES

This section describes all features of the boards, supported or not.

It documents all configurations of the boards and the interactions between
features and configuration items.

List of Hardware Features (TI K3 AM65x)

Hardware Interface  | Controller  | Driver/Component               | Status
------------------------------------------------------------------------------
GIC                 | on-chip     | DRV_INTCTLR_FDT_ARM_GIC        | SUPPORTED
UART                | on-chip     | DRV_SIO_AM3_TI_K3              | SUPPORTED
TIMER               | on-chip     | DRV_TIMER_FDT_OMAP3_TI_K3      | SUPPORTED
TIMER               | on-chip     | DRV_ARM_GEN_TIMER              | SUPPORTED
GPIO                | on-chip     | N/A                            | UNSUPPORTED
I2C                 | on-chip     | DRV_AM38XX_I2C_TI_K3           | SUPPORTED
EEPROM              | on-chip     | DRV_I2C_EEPROM                 | SUPPORTED
1000MB-ETHERNET     | on-chip     | DRV_END_FDT_TI_K3CPSW          | SUPPORTED
RTC                 | on-chip     | DRV_I2C_RTC_TI_K3              | SUPPORTED
CLOCK               | on-chip     | N/A                            | UNSUPPORTED
PINMUX              | on-chip     | N/A                            | UNSUPPORTED
PCIE                | on-chip     | N/A                            | UNSUPPORTED
SATA                | on-chip     | N/A                            | UNSUPPORTED
EDMA                | on-chip     | N/A                            | UNSUPPORTED
SPI:0               | on-chip     | DRV_AM35XX_SPI_TI_K3           | SUPPORTED
SPI FLASH           | on-board    | DRV_SPI_FLASH                  | SUPPORTED
WDT                 | on-chip     | N/A                            | UNSUPPORTED
USB                 | on-chip     | N/A                            | UNSUPPORTED
NAND FLASH          | on-chip     | N/A                            | UNSUPPORTED
SD/MMC              | on-chip     | N/A                            | UNSUPPORTED
DCAN                | on-chip     | N/A                            | UNSUPPORTED
LCD                 | on-chip     | N/A                            | UNSUPPORTED
MAILBOX             | on-chip     | N/A                            | UNSUPPORTED
QSPI                | on-chip     | N/A                            | UNSUPPORTED
SPINLOCK            | on-chip     | N/A                            | UNSUPPORTED
SGX                 | on-chip     | N/A                            | UNSUPPORTED
HDMI                | on-chip     | N/A                            | UNSUPPORTED

List of features

Module          | Status
------------------------------
FPU(VFPv4)      | SUPPORTED
L2 cache        | SUPPORTED
NEON            | SUPPORTED

Feature Interactions

Refer to the board vendor's documentation.

HARDWARE DETAILS

This section documents the details of the device drivers and board hardware
elements.

Verified Hardware

This BSP has been verified on the following boards:

Board                   | Revision
------------------------------------------------------------------
TMDX654GPEVM            | Rev 1.0
TMDX654IDKEVM           | Rev 1.0

Note: all the other revisions of the same board might work with this
      BSP, but it is not officially supported.

Serial Configuration

No special serial configuration is required. The serial configuration is
supported by the DRV_SIO_AM3_TI_K3 component and is enabled by default.

The default serial configuration is:
    Baud Rate   : 115200
    Data        : 8 bit
    Stop        : 1 bit
    Parity      : None
    Flow Control: None

Timers

For AM65x, there are ARM Generic Timer and 12 full featured general purpose
timers (DMTIMER[0 - 11]) with modes to free-run, count up and reload.
The supported timers can be read or written on-the-fly without stopping the
count.

To use DMTIMER, add the following component to the VIP:

    vxprj vip component add DRV_TIMER_FDT_OMAP3_TI_K3

To use ARM Generic Timer, add the following component to the VIP:

    vxprj vip component add DRV_ARM_GEN_TIMER

I2C

I2C is supported in this release of the BSP. The I2C controller driver supports 
both poll and interrupt modes. The interrupt mode is used by default.

To use I2C, add the following component to the VIP:

    vxprj vip component add myVip DRV_AM38XX_I2C_TI_K3

Use of the EEPROM requires the DRV_I2C_EEPROM and INCLUDE_EEPROMDRV driver
component. Once the INCLUDE_EEPROMDRV was defined, the EEPROM will be used as
I/O device, which can use the standard I/O routine open(), read(), write(),
ioctl(), close()...to access it.

    vxprj vip component add  DRV_I2C_EEPROM
    vxprj vip component add  INCLUDE_EEPROMDRV

The secure real time clock (RTC) is supported in this release of BSP. To enable
it, add the following component to the VIP:

    vxprj vip component add DRV_I2C_RTC_TI_K3

The client user should then use VxBus RTC APIs to access the RTC function. 
Alarms isn't supported in this release of BSP.

Ethernet Controller

There're 2 types of Ethernet port on the AM65x Common Processor Board: ICSSG 
Ethernet port and MCU CPSW Ethernet port. In the current release of the BSP,
only MCU CPSW Ethernet port(J12) is supported.

To enable the MCU CPSW Ethernet Controller in VxWorks, there are 2 methods:
1. Use profile PROFILE_DEVELOPMENT when creating VIP, the related components
   will be added and the network will be configured automatically.
2. When creating the VIP with the default profile, add the following component
   to the kernel configuration manually.

\cs
    vxprj component add INCLUDE_END
\ce

The Ethernet address (also known as the MAC address or station address) of the
on-chip network controller can be configured using one of the following methods:

    1. Configure the address by adding an endMacGet() callout function to the
       'BOARD_FUNC_TBL' in the boardLib structure. In this function, you can set
       the MAC address for a network controller.

       The prototype for endMacGet() is as follows:
\cs
       STATUS endMacGet
           (
           char *       ifName,
           unsigned int ifUnit,
           UINT8 *      ifMacAddr,
           unsigned int ifMacAddrLen
           )

       DESCRIPTION:
           This function gets the MAC address for a network controller which is
           specified by the network interface name.

       INPUT:
           ifName      : A pointer pointing to a string which is the network
                         interface name of the network controller
           ifUnit      : The network interface index
           ifMacAddr   : A pointer pointing to the memory that is used to store
                         the MAC address
           ifMacAddrLen: The length of the MAC address

       RETURNS:
           OK, or ERROR if it fails to get a MAC address
\ce
       The following is an example with pseudo code. It can be placed in the
       'sysLib.c' file in this BSP folder.
\cs
       BOARD_DESC boardDesc =
           {
           /@ .uVer     = @/ BOARD_DESC_VER_3_0,
           ...
           /@ .pFuncTbl = @/ &boardFuncTbl,
           ...
           };

       BOARD_FUNC_TBL boardFuncTbl =
           {
           ...
           /@ .endMacGet  = @/ boardEndMacGet,
           ...
           }

       STATUS boardEndMacGet
           (
           char *        ifName,
           unsigned int  ifUnit,
           UINT8 *       ifMacAddr,
           unsigned int  ifMacAddrLen
           )
           {
           UINT8 macAddr[6] = {0x00, 0x18, 0x31, 0xe0, 0xa8, 0x32};

           if ((ifName == NULL ) || (ifMacAddr == NULL))
               return ERROR;

           bcopy(macAddr, ifMacAddr, ifMacAddrLen);

           return OK;
           }
\ce

    2. Configure the address in the device tree node. To change the address,
       open the device tree source (DTS) file, locate the required property, and
       modify it. For example:
\cs
       local-mac-address = [ 00 18 31 e0 a8 32 ];
\ce
       NOTE: Use this method only when the endMacGet() callout function is
       unavailable. It can be derived from U-Boot environment variable ethaddr
       if independent DTB is used.

\sh Network Configuration
The port allows 10/100/1000M connection. The driver will auto-negotiate
and configure the port accordingly.

SPI

SPI is supported in this release of the BSP.
To use SPI, add the following component to the VIP:

    vxprj vip component add myVip DRV_AM35XX_SPI_TI_K3

To use the SPI Flash, add the following component to the VIP:

    vxprj vip component add myVip DRV_SPI_FLASH

If the TFFS is needed for the SPI Flash, the TFFS components must be enabled:

    vxprj vip component add myVip INCLUDE_TFFS INCLUDE_TL_FTL INCLUDE_TFFS_MOUNT
    vxprj vip component add myVip INCLUDE_TFFS_STUB_VXBFLASH
    vxprj vip component add myVip INCLUDE_MTD_VXBFLASH

Notes:
    For the verified boards, the total SPI flash size is 0x1000000.
    The parameter VXBFLASH_CFG_STR must be set according to available size of 
    the flash. For example:

    vxprj vip parameter set VXBFLASH_CFG_STR \"\$spiflash0#0:0x0,0x1000000,0x0,rfa0\"

Next, use one of the following commands to configure TFFS:

For the Windows host command tool:

    vxprj vip parameter set VXBFLASH_CFG_STR \"$spiflash0#0:0x0,0x1000000,0x0,rfa0\"

For the UNIX host command tool:

    vxprj vip parameter set VXBFLASH_CFG_STR \"\$spiflash0#0:0x0,0x1000000,0x0,rfa0\"

For Workbench, set the VXBFLASH_CFG_STR parameter to:

    "$spiflash0#0:0x0,0x1000000,0x0,rfa0; "

The parameter VXBFLASH_CFG_STR specifies the configuration for TFFS partitions,
"$<Flash instance name>#<index>:<start address>,<length>,<boot size>,<partition name>".
It must be set according to the requested TFFS usage of the flash.

You can use the following commands in the target shell to format and enable TFFS:

    sysTffsFormat 0
    usrTffsConfig 0, 0, "/tffs0"

Note: The sysTffsFormat can take a very long time to complete and only needs
      to run once for the TFFS.

When DOSFS is included with the necessary components, the following command can
be used:

    dosfsDiskFormat "/tffs0"

At this point, you can use VxWorks I/O and file system commands to access the
flash device as if it were a disk. For example, copy a VxWorks image from the
host (when accessible) to TFFS by using the file system copy command:

    copy "vxWorks", "/tffs0/vxWorks"

SEE ALSO

Workbench User's Guide
VxWorks 7 Programmer's Guide
VxWorks 7 Configuration and Build Guide
VxWorks 7 ARM Architecture Guide
VxWorks 7 BSP and Driver Guide
